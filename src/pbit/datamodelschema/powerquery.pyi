from .column import DaxType as DaxType
from _typeshed import Incomplete
from typing import Callable

PRIOR_PREFIX: str
MType: Incomplete
M_TYPE_TO_COLUMN_TYPE: dict[MType, DaxType]

def from_m_type_to_dax_type(m_type_dict: dict[str, MType]) -> dict[str, DaxType]: ...
def from_dax_type_to_m_type(dax_type_dict: dict[str, DaxType]) -> dict[str, MType]: ...
def list_to_m_str(list: list, wrap_values_as_str: bool) -> str: ...
def dict_to_m_str(dict: dict, wrap_keys_as_str: bool, wrap_values_as_str: bool) -> str: ...

class Command:
    id: str
    name: str
    function_text: str
    parameter_order: list[str]
    parameters: dict[str, str | int | None]
    get_command_name: Callable[[str], str]
    def __init__(self, function_text: str, parameter_order: list[str], parameters: dict[str, str | int | None], name: str | None = ...) -> None: ...
    def dump(self, command_name: str | None = ..., include_comma: bool = ...) -> str: ...

class PowerQuery:
    commands: list[Command]
    def __init__(self) -> None: ...
    def dump(self) -> list[str]: ...
    def insert_cmd(self, function_text: str, parameter_order: list[str], parameters: dict[str, str | int | None], name: str | None = ...) -> Command: ...
    def insert_read_file_cmd(self, relative_path: str, name: str | None = ...) -> Command: ...
    def insert_load_as_json_cmd(self, source=..., encoding: int | None = ..., name: str | None = ...) -> Command: ...
    def insert_load_as_csv_cmd(self, source=..., column_names: list | None = ..., delimiter: str | None = ..., extra_values: str | None = ..., encoding: int | None = ..., name: str | None = ...) -> Command: ...
    def insert_table_from_list_cmd(self, source=..., splitter: str = ..., columns: str | None = ..., default: str | None = ..., extra_values: str | None = ..., name: str | None = ...) -> Command: ...
    def insert_expand_from_record_cmd(self, target_column: str, conversion_table: dict[str, str] | list[str], source=..., name: str | None = ...) -> Command: ...
    def insert_transform_dax_types_cmd(self, transformations: dict[str, MType], source=..., culture: str | None = ..., name: str | None = ...) -> Command: ...
